{"ast":null,"code":"import { justFetch } from \"../Services/JustFetchService\";\n\nconst getPeriodName = (dataPe, dataItems) => {\n  // console.log(\"getting period\")\n  let data = [];\n  console.log({\n    dataPe\n  });\n  console.log({\n    dataItems\n  });\n  return 0;\n  dataPe.map(pe => {\n    let periodName = \"\";\n    periodName = dataItems[pe].name; //   console.log(periodName)\n\n    data = [...data, periodName];\n  });\n  return data;\n};\n\nconst getData = url => {\n  return justFetch(url, {}).then(res => {\n    return res;\n  });\n};\n\nconst generateDataToMap = (datadx, dataRows, dataItems) => {\n  let mapData = [];\n  datadx.map(mydx => {\n    let indicatorName = \"\";\n    let data = [];\n    let finalData = {\n      name: indicatorName,\n      data: data\n    }; // console.log(dataItems[mydx].name);\n\n    indicatorName = dataItems[mydx].name;\n    let filteredData = dataRows.filter(dr => {\n      return dr[0] === mydx;\n    }).map(dr2 => {\n      return parseInt(dr2[3]);\n    });\n    data = filteredData.sort((a, b) => {\n      return a[1] - b[1];\n    }); // console.log(filteredData)\n\n    data = [{\n      name: indicatorName,\n      data: filteredData\n    }];\n    console.log(data);\n    mapData = [...mapData, data[0]];\n  });\n  return mapData;\n};\n\nexport { getPeriodName, getData, generateDataToMap };","map":{"version":3,"sources":["/home/alby/Projects/Richard/pivotdhis2/src/Utils/Utils.js"],"names":["justFetch","getPeriodName","dataPe","dataItems","data","console","log","map","pe","periodName","name","getData","url","then","res","generateDataToMap","datadx","dataRows","mapData","mydx","indicatorName","finalData","filteredData","filter","dr","dr2","parseInt","sort","a","b"],"mappings":"AAAA,SAASA,SAAT,QAA0B,8BAA1B;;AAEA,MAAMC,aAAa,GAAG,CAACC,MAAD,EAASC,SAAT,KAAuB;AACzC;AACF,MAAIC,IAAI,GAAG,EAAX;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACJ,IAAAA;AAAD,GAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACH,IAAAA;AAAD,GAAZ;AAEA,SAAO,CAAP;AAEAD,EAAAA,MAAM,CAACK,GAAP,CAAYC,EAAD,IAAQ;AACjB,QAAIC,UAAU,GAAG,EAAjB;AACAA,IAAAA,UAAU,GAAGN,SAAS,CAACK,EAAD,CAAT,CAAcE,IAA3B,CAFiB,CAGjB;;AACAN,IAAAA,IAAI,GAAG,CAAC,GAAGA,IAAJ,EAAUK,UAAV,CAAP;AACD,GALD;AAOA,SAAOL,IAAP;AACD,CAjBD;;AAmBA,MAAMO,OAAO,GAAIC,GAAD,IAAS;AACvB,SAAOZ,SAAS,CAACY,GAAD,EAAM,EAAN,CAAT,CAAmBC,IAAnB,CAAyBC,GAAD,IAAS;AACtC,WAAOA,GAAP;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,MAAMC,iBAAiB,GAAG,CAACC,MAAD,EAASC,QAAT,EAAmBd,SAAnB,KAAiC;AACzD,MAAIe,OAAO,GAAG,EAAd;AAEAF,EAAAA,MAAM,CAACT,GAAP,CAAYY,IAAD,IAAU;AACnB,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIhB,IAAI,GAAG,EAAX;AACA,QAAIiB,SAAS,GAAG;AACdX,MAAAA,IAAI,EAAEU,aADQ;AAEdhB,MAAAA,IAAI,EAAEA;AAFQ,KAAhB,CAHmB,CAOnB;;AACAgB,IAAAA,aAAa,GAAGjB,SAAS,CAACgB,IAAD,CAAT,CAAgBT,IAAhC;AAEA,QAAIY,YAAY,GAAGL,QAAQ,CACxBM,MADgB,CACRC,EAAD,IAAQ;AACd,aAAOA,EAAE,CAAC,CAAD,CAAF,KAAUL,IAAjB;AACD,KAHgB,EAIhBZ,GAJgB,CAIXkB,GAAD,IAAS;AACZ,aAAOC,QAAQ,CAACD,GAAG,CAAC,CAAD,CAAJ,CAAf;AACD,KANgB,CAAnB;AAQArB,IAAAA,IAAI,GAAGkB,YAAY,CAACK,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,aAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAf;AACD,KAFM,CAAP,CAlBmB,CAqBnB;;AACAzB,IAAAA,IAAI,GAAG,CAAC;AAAEM,MAAAA,IAAI,EAAEU,aAAR;AAAuBhB,MAAAA,IAAI,EAAEkB;AAA7B,KAAD,CAAP;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAc,IAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAad,IAAI,CAAC,CAAD,CAAjB,CAAV;AACD,GAzBD;AA2BA,SAAOc,OAAP;AACD,CA/BD;;AAiCA,SAASjB,aAAT,EAAwBU,OAAxB,EAAiCI,iBAAjC","sourcesContent":["import { justFetch } from \"../Services/JustFetchService\";\n\nconst getPeriodName = (dataPe, dataItems) => {\n    // console.log(\"getting period\")\n  let data = [];\n\n  console.log({dataPe})\n  console.log({dataItems})\n\n  return 0;\n\n  dataPe.map((pe) => {\n    let periodName = \"\";\n    periodName = dataItems[pe].name;\n    //   console.log(periodName)\n    data = [...data, periodName];\n  });\n\n  return data;\n};\n\nconst getData = (url) => {\n  return justFetch(url, {}).then((res) => {\n    return res;\n  });\n};\n\nconst generateDataToMap = (datadx, dataRows, dataItems) => {\n  let mapData = [];\n\n  datadx.map((mydx) => {\n    let indicatorName = \"\";\n    let data = [];\n    let finalData = {\n      name: indicatorName,\n      data: data,\n    };\n    // console.log(dataItems[mydx].name);\n    indicatorName = dataItems[mydx].name;\n\n    let filteredData = dataRows\n      .filter((dr) => {\n        return dr[0] === mydx;\n      })\n      .map((dr2) => {\n        return parseInt(dr2[3]);\n      });\n\n    data = filteredData.sort((a, b) => {\n      return a[1] - b[1];\n    });\n    // console.log(filteredData)\n    data = [{ name: indicatorName, data: filteredData }];\n    console.log(data);\n    mapData = [...mapData, data[0]];\n  });\n\n  return mapData;\n};\n\nexport { getPeriodName, getData, generateDataToMap };\n"]},"metadata":{},"sourceType":"module"}