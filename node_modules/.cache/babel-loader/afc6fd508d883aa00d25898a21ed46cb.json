{"ast":null,"code":"import { justFetch } from \"../Services/JustFetchService\";\n\nconst getPeriodName = (dataPe, dataItems) => {\n  let data = [];\n  dataPe.map(pe => {\n    let periodName = \"\";\n    periodName = dataItems[pe].name; //   console.log(periodName)\n\n    data = [...data, periodName];\n  });\n  return data;\n};\n\nconst getData = url => {\n  return justFetch(url, {}).then(res => {\n    return res;\n  });\n};\n\nconst generateDataToMap = (datadx, dataRows) => {\n  let mapData = [];\n  datadx.map(mydx => {\n    let indicatorName = \"\";\n    let data = [];\n    let finalData = {\n      name: indicatorName,\n      data: data\n    }; // console.log(dataItems[mydx].name);\n\n    indicatorName = dataItems[mydx].name;\n    let filteredData = dataRows.filter(dr => {\n      return dr[0] === mydx;\n    }).map(dr2 => {\n      return parseInt(dr2[3]);\n    });\n    data = filteredData.sort((a, b) => {\n      return a[1] - b[1];\n    }); // console.log(filteredData)\n\n    data = [{\n      name: indicatorName,\n      data: filteredData\n    }];\n    console.log(data);\n    mapData = [...mapData, data[0]];\n  });\n  return mapData;\n};\n\nexport { getPeriodName, getData, generateDataToMap };","map":{"version":3,"sources":["/home/alby/Projects/Richard/pivotdhis2/src/Utils/Utils.js"],"names":["justFetch","getPeriodName","dataPe","dataItems","data","map","pe","periodName","name","getData","url","then","res","generateDataToMap","datadx","dataRows","mapData","mydx","indicatorName","finalData","filteredData","filter","dr","dr2","parseInt","sort","a","b","console","log"],"mappings":"AAAA,SAASA,SAAT,QAA0B,8BAA1B;;AAEA,MAAMC,aAAa,GAAC,CAACC,MAAD,EAAQC,SAAR,KAAoB;AACpC,MAAIC,IAAI,GAAC,EAAT;AAEAF,EAAAA,MAAM,CAACG,GAAP,CAAYC,EAAD,IAAM;AACb,QAAIC,UAAU,GAAC,EAAf;AACAA,IAAAA,UAAU,GAAEJ,SAAS,CAACG,EAAD,CAAT,CAAcE,IAA1B,CAFa,CAGf;;AACEJ,IAAAA,IAAI,GAAC,CAAC,GAAGA,IAAJ,EAASG,UAAT,CAAL;AACH,GALD;AAOA,SAAOH,IAAP;AACH,CAXD;;AAcA,MAAMK,OAAO,GAAEC,GAAD,IAAO;AACjB,SAAOV,SAAS,CAACU,GAAD,EAAK,EAAL,CAAT,CAAkBC,IAAlB,CAAwBC,GAAD,IAAO;AACjC,WAAOA,GAAP;AACH,GAFM,CAAP;AAGH,CAJD;;AAOA,MAAMC,iBAAiB,GAAC,CAACC,MAAD,EAAQC,QAAR,KAAmB;AAEvC,MAAIC,OAAO,GAAG,EAAd;AAEAF,EAAAA,MAAM,CAACT,GAAP,CAAYY,IAAD,IAAU;AACnB,QAAIC,aAAa,GAAG,EAApB;AACA,QAAId,IAAI,GAAG,EAAX;AACA,QAAIe,SAAS,GAAG;AACdX,MAAAA,IAAI,EAAEU,aADQ;AAEdd,MAAAA,IAAI,EAAEA;AAFQ,KAAhB,CAHmB,CAOnB;;AACAc,IAAAA,aAAa,GAAGf,SAAS,CAACc,IAAD,CAAT,CAAgBT,IAAhC;AAEA,QAAIY,YAAY,GAAGL,QAAQ,CACxBM,MADgB,CACRC,EAAD,IAAQ;AACd,aAAOA,EAAE,CAAC,CAAD,CAAF,KAAUL,IAAjB;AACD,KAHgB,EAIhBZ,GAJgB,CAIXkB,GAAD,IAAS;AACZ,aAAOC,QAAQ,CAACD,GAAG,CAAC,CAAD,CAAJ,CAAf;AACD,KANgB,CAAnB;AAQAnB,IAAAA,IAAI,GAAGgB,YAAY,CAACK,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,aAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAf;AACD,KAFM,CAAP,CAlBmB,CAqBjB;;AACFvB,IAAAA,IAAI,GAAG,CAAC;AAAEI,MAAAA,IAAI,EAAEU,aAAR;AAAuBd,MAAAA,IAAI,EAAEgB;AAA7B,KAAD,CAAP;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYzB,IAAZ;AACAY,IAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAaZ,IAAI,CAAC,CAAD,CAAjB,CAAV;AACD,GAzBD;AA2BA,SAAOY,OAAP;AACH,CAhCD;;AAkCA,SACIf,aADJ,EAEIQ,OAFJ,EAGII,iBAHJ","sourcesContent":["import { justFetch } from \"../Services/JustFetchService\"\n\nconst getPeriodName=(dataPe,dataItems)=>{\n    let data=[]\n\n    dataPe.map((pe)=>{\n        let periodName=\"\"\n        periodName= dataItems[pe].name\n      //   console.log(periodName)\n        data=[...data,periodName]\n    })\n\n    return data;\n}\n\n\nconst getData=(url)=>{\n    return justFetch(url,{}).then((res)=>{\n        return res\n    })\n}\n\n\nconst generateDataToMap=(datadx,dataRows)=>{\n\n    let mapData = [];\n\n    datadx.map((mydx) => {\n      let indicatorName = \"\";\n      let data = [];\n      let finalData = {\n        name: indicatorName,\n        data: data,\n      };\n      // console.log(dataItems[mydx].name);\n      indicatorName = dataItems[mydx].name;\n\n      let filteredData = dataRows\n        .filter((dr) => {\n          return dr[0] === mydx;\n        })\n        .map((dr2) => {\n          return parseInt(dr2[3]);\n        });\n\n      data = filteredData.sort((a, b) => {\n        return a[1] - b[1];\n      });\n        // console.log(filteredData)\n      data = [{ name: indicatorName, data: filteredData }];\n      console.log(data)\n      mapData = [...mapData, data[0]];\n    });\n\n    return mapData;\n}\n\nexport {\n    getPeriodName,\n    getData,\n    generateDataToMap\n}"]},"metadata":{},"sourceType":"module"}