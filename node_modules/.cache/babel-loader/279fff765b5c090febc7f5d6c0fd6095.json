{"ast":null,"code":"let justFetch = async (endpoint, postoptions) => {\n  let showLoading = postoptions.showLoading; //   if (showLoading != \"false\") {\n  //     $(\".graph\").html(\n  //       `<div class=\"col-md-12 text-center p-t-15\">${loading_template_plain}</div>`\n  //     );\n  //   }\n\n  if (endpoint == null || endpoint.length < 4) {\n    return {\n      error: true,\n      type: \"url\",\n      message: \"Invalid endpoint URL\"\n    };\n  }\n\n  let options = postoptions || {};\n  let req_method = options.method || \"GET\"; //PUT //POST //DELETE etc.\n\n  let req_hd = {};\n  let headers = {};\n  let final_endpoint = endpoint;\n\n  if (!window.location.hostname.includes(\"play.dhis2.org/\")) {\n    let encurl = window.encodeURIComponent(window.btoa(endpoint));\n    console.log(\"encurl = \" + encurl);\n    final_endpoint = \"http://localhost:5600/request/\" + encurl;\n    console.log(\"final end\", final_endpoint);\n  }\n\n  req_hd.headers = headers;\n  req_hd.method = req_method;\n  req_hd.Accept = \"application/json\"; // console.log(`justFetch: ${final_endpoint} with headers: ${JSON.stringify(req_hd)}`);\n\n  try {\n    let result = await window.fetch(final_endpoint, req_hd);\n    let result_json = await result.json();\n\n    if (result_json.status === \"ERROR\") {\n      throw result_json;\n    }\n\n    return result_json;\n  } catch (err) {\n    return {\n      error: true,\n      msg: err.message\n    };\n  }\n};\n\nexport { justFetch };","map":{"version":3,"sources":["/home/richie/Desktop/dev_practs/Public-Dashboard/src/Services/JustFetchService.js"],"names":["justFetch","endpoint","postoptions","showLoading","length","error","type","message","options","req_method","method","req_hd","headers","final_endpoint","window","location","hostname","includes","encurl","encodeURIComponent","btoa","console","log","Accept","result","fetch","result_json","json","status","err","msg"],"mappings":"AAAA,IAAIA,SAAS,GAAG,OAAOC,QAAP,EAAiBC,WAAjB,KAAiC;AAC/C,MAAIC,WAAW,GAAGD,WAAW,CAACC,WAA9B,CAD+C,CAEjD;AACA;AACA;AACA;AACA;;AACE,MAAIF,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACG,MAAT,GAAkB,CAA1C,EAA6C;AAC3C,WAAO;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,IAAI,EAAE,KAArB;AAA4BC,MAAAA,OAAO,EAAE;AAArC,KAAP;AACD;;AACD,MAAIC,OAAO,GAAGN,WAAW,IAAI,EAA7B;AACA,MAAIO,UAAU,GAAGD,OAAO,CAACE,MAAR,IAAkB,KAAnC,CAX+C,CAWL;;AAC1C,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,cAAc,GAAGZ,QAArB;;AACA,MAAI,CAACa,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,QAAzB,CAAkC,iBAAlC,CAAL,EAA2D;AACzD,QAAIC,MAAM,GAAGJ,MAAM,CAACK,kBAAP,CAA0BL,MAAM,CAACM,IAAP,CAAYnB,QAAZ,CAA1B,CAAb;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcJ,MAA1B;AACAL,IAAAA,cAAc,GAAG,mCAAmCK,MAApD;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBT,cAAzB;AACD;;AACDF,EAAAA,MAAM,CAACC,OAAP,GAAiBA,OAAjB;AACAD,EAAAA,MAAM,CAACD,MAAP,GAAgBD,UAAhB;AACAE,EAAAA,MAAM,CAACY,MAAP,GAAgB,kBAAhB,CAvB+C,CAyB/C;;AACA,MAAI;AACF,QAAIC,MAAM,GAAG,MAAMV,MAAM,CAACW,KAAP,CAAaZ,cAAb,EAA6BF,MAA7B,CAAnB;AACA,QAAIe,WAAW,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAxB;;AACA,QAAID,WAAW,CAACE,MAAZ,KAAuB,OAA3B,EAAoC;AAClC,YAAMF,WAAN;AACD;;AACD,WAAOA,WAAP;AACD,GAPD,CAOE,OAAOG,GAAP,EAAY;AACZ,WAAO;AAAExB,MAAAA,KAAK,EAAE,IAAT;AAAeyB,MAAAA,GAAG,EAAED,GAAG,CAACtB;AAAxB,KAAP;AACD;AACF,CApCD;;AAsCA,SAASP,SAAT","sourcesContent":["let justFetch = async (endpoint, postoptions) => {\n  let showLoading = postoptions.showLoading;\n//   if (showLoading != \"false\") {\n//     $(\".graph\").html(\n//       `<div class=\"col-md-12 text-center p-t-15\">${loading_template_plain}</div>`\n//     );\n//   }\n  if (endpoint == null || endpoint.length < 4) {\n    return { error: true, type: \"url\", message: \"Invalid endpoint URL\" };\n  }\n  let options = postoptions || {};\n  let req_method = options.method || \"GET\"; //PUT //POST //DELETE etc.\n  let req_hd = {};\n  let headers = {};\n  let final_endpoint = endpoint;\n  if (!window.location.hostname.includes(\"play.dhis2.org/\")) {\n    let encurl = window.encodeURIComponent(window.btoa(endpoint));\n    console.log(\"encurl = \" + encurl);\n    final_endpoint = \"http://localhost:5600/request/\" + encurl;\n    console.log(\"final end\", final_endpoint);\n  }\n  req_hd.headers = headers;\n  req_hd.method = req_method;\n  req_hd.Accept = \"application/json\";\n\n  // console.log(`justFetch: ${final_endpoint} with headers: ${JSON.stringify(req_hd)}`);\n  try {\n    let result = await window.fetch(final_endpoint, req_hd);\n    let result_json = await result.json();\n    if (result_json.status === \"ERROR\") {\n      throw result_json;\n    }\n    return result_json;\n  } catch (err) {\n    return { error: true, msg: err.message };\n  }\n};\n\nexport { justFetch };\n"]},"metadata":{},"sourceType":"module"}